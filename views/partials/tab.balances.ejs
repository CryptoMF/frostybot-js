<%

if (typeof(tab_balances) !== 'undefined') {
  var accounts = Object.values(tab_balances);
  var stubs = tab_balances.hasOwnProperty('stubs') ? tab_balances.stubs : [];
} else {
  var stubs = [];
}

%>

<div class="frostybot-panel-header">
  <div class="row">
    <div class="col "><p class="m-0" id="balancestitle">Balances</p></div>
    <div class="col text-right">
      <div class="float-right" id="balancesnavbar" style="vertical-align: middle; float: right; margin-right: 10px; display: none;">
        <!--span>
          <button type="button" class="btn btn-default frostybot-navbutton" href="#" id="columnchooser" style="margin-bottom: 20px; width: 100px;"><span class="fa fa-columns"></span> Columns</button>
        </span-->
        <span style="display: inline-block; white-space: nowrap;">
          <!--%- include('../partials/stub.selector.ejs', {stubs: stubs}); %--> 
          <select id="balancesstubselector" style="width: 200px; height: 30px; font-weight: normal; border-radius: 5px; display: none;">
            <%
                stubs.forEach(stub => {
            %>
                    <option value="<%= stub %>"><%= stub %></option>
            <%
                });
            %>
          </select> 
        </span>
        <span style="display: inline-block; white-space: nowrap;">
          <button type="button" class="btn btn-default frostybot-navbutton" href="#" id="balancescolumnchooser" style="margin-bottom: 20px;  width: 30px;" data-toggle="tooltip" data-placement="bottom" title="Choose Columns"><span class="fa fa-columns"></span></button>
        </span>
        <span style="display: inline-block; white-space: nowrap;">
          <button type="button" class="btn btn-default frostybot-navbutton jqx-fill-state-normal jqx-button" href="#" id="balancescolumnsreset" style="margin-bottom: 20px;  width: 30px;" data-toggle="tooltip" data-placement="bottom" title="Reset Column Layout"><span class="fa fa-undo"></span></button>
        </span>
        <span style="display: inline-block; white-space: nowrap;">
          <button type="button" class="btn btn-default frostybot-navbutton jqx-fill-state-normal jqx-button" href="#" id="balancesrefreshlink" style="margin-bottom: 20px; width: 30px;" data-toggle="tooltip" data-placement="bottom" title="Refresh Data from Exchange"><span class="fas fa-sync"></span></button>
        </span>

      </div>
    </div>
  </div>
</div>
<div class="frostybot-panel-content" >
  <div id="table_balances"></div>
</div>

</div>

<style type="text/css">
  .red {
      color: #BB0000;
  }
  
  .green {
      color: #008800;
  }
  
</style>
<div id="balancesgrid"></div>
<script src="/scripts/notifications.js"></script>
<script src="/scripts/api.js"></script>

<script type="text/javascript">
  
    $(document).ready(function () {
        
      var griddata = {};

      // Autorefresh

      if (window.timers == undefined) window.timers = {};
      if (window.timers.hasOwnProperty('balancesRefresh')) {
        clearInterval(window.timers.balancesRefresh);
      }
      window.timers['balancesRefresh'] = setInterval(function() {
        var currentPage = localStorage.getItem("currentPage")
        if (currentPage == 'tab_balances') {
          refreshGrid();
        }
      }, 10000)


      // Stub selector dropdown box

      $("#balancesstubselector").jqxDropDownList({height: 30, width: 200, checkboxes: true, autoDropDownHeight: true });    

      // Initialize

      function initStubs() {
          var items = $("#balancesstubselector").jqxDropDownList('getItems'); 
          if (items.length == 1) {
              $("#balancesstubselector").jqxDropDownList('checkItem', items[0]);
              updateStubs();
          }
          if (items.length > 1) {
              loadStubs();
              var allChecked = $("#balancesstubselector").jqxDropDownList('getCheckedItems');
              if (Array.isArray(allChecked) && allChecked.length > 0) {
                  updateStubs();
              } else {
                  items.forEach(item => {
                      $("#balancesstubselector").jqxDropDownList('checkItem', item);
                  })
                  updateStubs();
              }
              $("#balancesstubselector").show();
          }
      }

      initStubs();

      // Load stubs from localstorage

      function loadStubs() {
          if (localStorage) {
              var stubs = localStorage.getItem("stubsselected");
              if (![undefined,null,''].includes(stubs)) {
                  $("#balancesstubselector").jqxDropDownList('uncheckAll');
                  (stubs + ',_').split(',').forEach(filter => {
                      if (filter != '_') {
                          var item = $("#balancesstubselector").jqxDropDownList('getItemByValue', filter);
                          if (item != undefined) {
                              if (item.hasOwnProperty('index')) {
                                  $("#balancesstubselector").jqxDropDownList('checkIndex', item.index)
                              }
                          }
                      }
                  });
              }
          }
      }

      //loadStubs();

      // Update selected stubs

      function updateStubs() {
          if (localStorage) {
              var allChecked = $("#balancesstubselector").jqxDropDownList('getCheckedItems');
              var stubsarr = [];
              if (Array.isArray(allChecked)) {
                  for (var i = 0; i < allChecked.length; i++) {
                      var item = allChecked[i];
                      stubsarr.push(item.value);
                  }
              }
              var stubs = stubsarr.join(',');
              localStorage.setItem("stubsselected", stubs);
          }
      }

      $("#balancesstubselector").on('checkChange', function () {
          updateStubs();
      });

      $("#balancesstubselector").on('click', function() {
          updateStubs();
      });

      // Get Balances Grid Data

      function getSelectedStubs() {
          var allChecked = $("#balancesstubselector").jqxDropDownList('getCheckedItems');
          var stubsarr = [];
          if (Array.isArray(allChecked)) {
              for (var i = 0; i < allChecked.length; i++) {
                  var item = allChecked[i];
                  stubsarr.push(item.value);
              }
          }
          return JSON.stringify(stubsarr);
      }

      var balancesSource = {
        localdata: [],
        datafields: [
          { name: 'currency', type: 'string', },
          { name: 'base_free', type: 'number' },
          { name: 'base_used', type: 'number' },
          { name: 'base_total', type: 'number' },
          { name: 'usd_free', type: 'number' },
          { name: 'usd_used', type: 'number' },
          { name: 'usd_total', type: 'number' },
        ],
        datatype: "json"
      };

      function setGridData(data) {
        balancesSource.localdata = data;
        $("#balancesgrid").jqxGrid('updatebounddata');
        setPlaceHolderMessage("No balances found for the selected stub(s).");
        //setTimeout(function () {
        //  $(".jqx-grid-empty-cell span").html("<em>No balances found for selected stub(s).</em>");
        //}, 100);
      }

      function refreshGrid(forcerefresh = false, quiet = true) {
        if (localStorage) {
          var token = localStorage.getItem("token");
          if (token != null) {
            var params = {
              token: JSON.parse(token),
              stubs: getSelectedStubs(),
              ts: (new Date()).getTime(),
              forcerefresh: forcerefresh,
            };
            if (quiet != true) setGridData([]);
            setPlaceHolderMessage("Refreshing balances...")
            jQuery.getJSON({
                url: "/ui/data/griddata_balances",
                data: params,
                global: !quiet,
                success: function(result) {
                  setGridData(result);
                }
            });
          }
        }
      }

      var balancesSource = {
        localdata: griddata,
        datafields: [
          { name: 'stub', type: 'string', },
          { name: 'currency', type: 'string', },
          { name: 'base_free', type: 'number' },
          { name: 'base_used', type: 'number' },
          { name: 'base_total', type: 'number' },
          { name: 'usd_free', type: 'number' },
          { name: 'usd_used', type: 'number' },
          { name: 'usd_total', type: 'number' },
        ],
        datatype: "json"
      };
  
      var balancesAdapter = new $.jqx.dataAdapter(balancesSource, {autobind: false});

      var initialState = null;

      $("#balancesgrid").jqxGrid({
        width: '100%',
        autoheight: true,
        source: balancesAdapter,
        columnsresize: true,
        filterable: true,
        sortable: true,
        showaggregates: true,
        showstatusbar: true,
        statusbarheight: 23,
        columnsheight: 20,
        rowsheight: 20,
        theme: 'dark',
        showemptyrow: true,
        selectionmode: 'none',
        columnsmenu: true,
        autosavestate: true,
        autoloadstate: true,
        showdefaultloadelement: false,
        enablehover: false,
        ready: function () {
          initialState = $("#balancesgrid").jqxGrid('getstate');
        },
        columns: [
          { text: 'Stub', datafield: 'stub', filtertype: 'checkedlist', width: 'auto' },
          { text: 'Currency', datafield: 'currency', filtertype: 'checkedlist', width:  100, aggregates: ['count'], aggregatesrenderer: function (aggregates) { var renderstring = ""; $.each(aggregates, function (key, value) { renderstring += '<div style="position: relative; margin: 4px; overflow: hidden;"><b>Balances: </b><font>' + value +'</div>'; }); return renderstring; } },
          { text: 'Free', datafield: 'base_free', columngroup: 'base', hideable: true, width: 120, align: 'right', cellsalign: 'right', cellsformat: 'd4'},
          { text: 'Used', datafield: 'base_used', columngroup: 'base', hideable: true, width: 120, align: 'right', cellsalign: 'right', cellsformat: 'd4'},
          { text: 'Total', datafield: 'base_total', columngroup: 'base', hideable: true, width: 120, align: 'right', cellsalign: 'right', cellsformat: 'd4' },
          { text: 'Free', datafield: 'usd_free', columngroup: 'usd', hideable: true, width: 120, align: 'right', cellsalign: 'right', cellsformat: 'c2' },
          { text: 'Used', datafield: 'usd_used', columngroup: 'usd', hideable: true, width: 120, align: 'right', cellsalign: 'right', cellsformat: 'c2' },
          { text: 'Total', datafield: 'usd_total', columngroup: 'usd', hideable: true, width: 120, align: 'right', cellsalign: 'right', aggregates: ['sum'], aggregatesrenderer: function (aggregates) { var renderstring = ""; $.each(aggregates, function (key, value) { renderstring += '<div style="position: relative; margin: 4px; overflow: hidden;"><b>' + value +'</b></div>'; }); return renderstring; }, cellsformat: 'c2' },
        ],
        columngroups: [
          { text: 'Base Currency', align: 'center', name: 'base' },
          { text: 'USD Value', align: 'center', name: 'usd' },
        ],
      });

      function setPlaceHolderMessage(text) {
        var localizationobject = {};
        localizationobject.emptydatastring = text;
        $("#balancesgrid").jqxGrid('localizestrings', localizationobject);
      }

      setPlaceHolderMessage("No balances found for the selected stub(s).");
    
      $("#balancesstubselector").on('checkChange', function () {
        refreshGrid();
      });

       
      $("#balancesrefreshlink").on('click', function() {
        refreshGrid(true, false);
      });

      $("#balancescolumnsreset").on('click', function() {
        $("#balancesgrid").jqxGrid('loadstate', initialState);
      });

      $('#balancesnavbar').show();

      $("#balancescolumnchooser").jqxButton();
      $("#balancescolumnchooser").on('click', function () {
          $("#balancesgrid").jqxGrid('openColumnChooser');
      });

      refreshGrid();
      $("#balancesgrid").jqxGrid('clearselection');

    });
    
  </script>